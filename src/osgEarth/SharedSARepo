/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SHARED_SA_REPO_H
#define OSGEARTH_SHARED_SA_REPO_H 1

#include <osgEarth/Common>
#include <osgEarth/ThreadingUtils>
#include <osg/observer_ptr>
#include <list>

namespace osgEarth
{
    /**
     * A thread-safe object sharing container for osg::StateAttribute instances
     * (or anything else implementing the compare() method). The VirtualProgram
     * uses this to share identical Program objects.
     *
     * Note. This object holds observers, so there is no need to deal with
     * releaseGLObjects et al. since it can never be the final owner.
     */
    template<typename T>
    struct SharedSARepo
    {
    private:
        typedef std::list< osg::observer_ptr<T> > SAUniqueSet;
        SAUniqueSet      _set;
        Threading::Mutex _mx;
        bool             _enabled;

    public:
        SharedSARepo() : _enabled(true) { }

        ~SharedSARepo() 
        {
            clear();
        }

        void setEnabled(bool value)
        {
            _enabled = value;
            if ( !_enabled )
            {
                clear();
            }
        }

        bool isEnabled() const
        {
            return _enabled;
        }

        bool share(osg::ref_ptr<T>& out)
        {
            if ( !_enabled )
                return false;

            _mx.lock();

            bool found = false;
            for (typename SAUniqueSet::iterator i = _set.begin(); !found && i != _set.end(); )
            {
                osg::ref_ptr<T> temp;
                if ( i->lock(temp) )
                {
                    if ( temp->compare( *out.get() ) == 0 )
                    {
                        out = temp.get();
                        //OE_DEBUG << LC << "Shared a program; repo size = " << _set.size() << std::endl;
                        found = true;
                    }
                    else
                    {
                        ++i;
                    }
                }
                else 
                {
                    // found an orphaned observer; prune it
                    typename SAUniqueSet::iterator j = i++;
                    _set.erase( j );
                    //OE_DEBUG << LC << "Pruned a program; repo size = " << _set.size() << std::endl;
                }
            }

            if ( !found )
            {
                _set.push_back(out.get());
                //OE_DEBUG << LC << "Added a program; repo size = " << _set.size() << std::endl;
            }

            _mx.unlock();
            return found;
        }

        void clear()
        {
            _mx.lock();
            _set.clear();
            _mx.unlock();
        }
    };
}

#endif // OSGEARTH_SHARED_SA_REPO_H
