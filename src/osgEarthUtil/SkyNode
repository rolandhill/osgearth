/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_SKY_NODE
#define OSGEARTHUTIL_SKY_NODE

#include <osgEarthUtil/Common>
#include <osgEarthUtil/Environment>
#include <osg/CoordinateSystemNode>
#include <osg/MatrixTransform>
#include <osg/Uniform>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;

    /**
     * Serializable options for creation of a SkyNode.
     */
    class OSGEARTHUTIL_EXPORT SkyNodeOptions : public EnvironmentOptions
    {
    public:
        SkyNodeOptions();
        SkyNodeOptions(const ConfigOptions& options);

        /** File containing star locations */
        optional<std::string>& starFile() { return _starFile; }
        const optional<std::string>& starFile() const { return _starFile; }

        /** Only draw stars of at least this magnitude */
        optional<float>& minStarMagnitude() { return _minStarMagnitude; }
        const optional<float>& minStarMagnitude() const { return _minStarMagnitude; }

    protected:
        optional<std::string> _starFile;
        optional<float>       _minStarMagnitude;
    };

    /**
     * A sky model.
     */
    class OSGEARTHUTIL_EXPORT SkyNode : public EnvironmentNode
    {
    public:
        /** Creates a new sky node based on the provided map. */
        SkyNode(const Map* map);
        SkyNode(const Map* map, const SkyNodeOptions& options);

    public:

        /** Attached this sky node to a view (placing a sky light). */
        void attach( osg::View* view, int lightNum =0 );

        /** The minimum brightness for non-sunlit areas. */
        void setAmbientBrightness( float value, osg::View* view =0L );
        float getAmbientBrightness( osg::View* view =0L ) const;

        /** Enables or disables automatic ambience */
        void setAutoAmbience(bool value);
        bool getAutoAmbience() const;

        /** Whether the moon is visible */
        void setMoonVisible( bool value, osg::View* view =0L );
        bool getMoonVisible( osg::View* view =0L ) const;

        /** Whether the stars are visible */
        void setStarsVisible( bool value, osg::View* view =0L );
        bool getStarsVisible( osg::View* view =0L ) const;

    public: // osg::Node

        //override
        virtual void traverse( osg::NodeVisitor& nv );

        //override
        virtual osg::BoundingSphere computeBound() const;


    protected: // EnvironmentNode

        // update when the ephemeris is set
        virtual void onSetEphemeris();

        // update when the date/time is set
        virtual void onSetDateTime();

    protected:

        // dtor.
        virtual ~SkyNode() { }

    private:

        /** Sets the sun's position as a unit vector. */
        void setSunPosition(const osg::Vec3& pos, osg::View* view);

        /** Sets the moon position as a geocentric coordinate */
        void setMoonPosition(const osg::Vec3d& pos, osg::View* view);

        /** Sets the sun's position as a latitude and longitude. */
        void setSunPosition(double lat_degrees, double lon_degrees, osg::View* view);

        struct StarData
        {
            std::string name;
            double right_ascension;
            double declination;
            double magnitude;

            StarData() { }
            StarData( std::stringstream &ss );
        };

        struct PerViewData
        {
            osg::Vec3f                         _lightPos;
            osg::ref_ptr<osg::Light>           _light;
            osg::ref_ptr<osg::Uniform>         _lightPosUniform;
            osg::Matrixd                       _sunMatrix;
            osg::Matrixd                       _moonMatrix;
            osg::Matrixd                       _starsMatrix;
            bool                               _starsVisible;
            bool                               _moonVisible;

            // only available in per-view structures..not default
            osg::ref_ptr<osg::Group>           _cullContainer;
            osg::ref_ptr<osg::MatrixTransform> _sunXform;
            osg::ref_ptr<osg::MatrixTransform> _moonXform;
            osg::ref_ptr<osg::MatrixTransform> _starsXform;

            DateTime _date;
        };

        PerViewData _defaultPerViewData;
        typedef std::map<osg::View*, PerViewData> PerViewDataMap;
        PerViewDataMap _perViewData;

        float _innerRadius, _outerRadius, _sunDistance, _starRadius, _minStarMagnitude;
        osg::ref_ptr<osg::Node> _sun, _stars, _atmosphere, _moon;
        osg::ref_ptr<osg::Uniform> _starAlpha;
        osg::ref_ptr<osg::Uniform> _starPointSize;

        osg::Vec3d _moonPosition;
        bool _autoAmbience;

        osg::ref_ptr<const osg::EllipsoidModel> _ellipsoidModel;


        void initialize(const Map* map, const SkyNodeOptions& options);

        void makeAtmosphere( const osg::EllipsoidModel* );
        void makeSun();
        void makeMoon();

        void makeStars(const SkyNodeOptions& options);
        osg::Node* buildStarGeometry(const std::vector<StarData>& stars);
        void getDefaultStars(std::vector<StarData>& out_stars);
        bool parseStarFile(const std::string& starFile, std::vector<StarData>& out_stars);

        void setAmbientBrightness( PerViewData& data, float value );
        void setSunPosition( PerViewData& data, const osg::Vec3& pos );
        void setMoonPosition( PerViewData& data, const osg::Vec3d& pos );

        osg::ref_ptr<Ephemeris> _ephemeris;
    };

} } // namespace osgEarth::Util

#endif //OSGEARTHUTIL_SKY_NODE
