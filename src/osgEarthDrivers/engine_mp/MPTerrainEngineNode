/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_ENGINE_NODE_H
#define OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_ENGINE_NODE_H 1

#include <osgEarth/TerrainEngineNode>
#include <osgEarth/TextureCompositor>
#include <osgEarth/Map>
#include <osgEarth/Revisioning>
#include <osgEarth/ThreadingUtils>

#include "MPTerrainEngineOptions"
#include "KeyNodeFactory"
#include "TileModelFactory"
#include "TileModelCompiler"
#include "TileNodeRegistry"

#include <osg/Geode>
#include <osg/NodeCallback>
#include <osg/Uniform>

using namespace osgEarth;

namespace osgEarth { namespace Drivers { namespace MPTerrainEngine
{
    class MPTerrainEngineNode : public TerrainEngineNode
    {
    public:
        MPTerrainEngineNode();
        META_Node(osgEarth,MPTerrainEngineNode);
        virtual ~MPTerrainEngineNode();

    public:
        /** Creates a tile node that is set up to page in subtiles. */
        osg::Node* createNode(const TileKey& key, ProgressCallback* progress =0L);

        /** Creates a tile node with no support for paging in subtiles. */
        osg::Node* createStandaloneNode(const TileKey& key, ProgressCallback* progress =0L);

        /** Used during tile stitching to signify which sides need to be modified. */
        enum Side
        {
            Side_W = 0x1,
            Side_N = 0x1 << 1,
            Side_E = 0x1 << 2,
            Side_S = 0x1 << 3,
            Side_All = Side_W | Side_N | Side_E | Side_S
        } ;

        struct ChangedTile
        {
            ChangedTile(TileNode* tn, int is) { _tilenode = tn; _side = is; }
            osg::ref_ptr<TileNode> _tilenode;
            int _side;
        };

        /** Add a tile to the register of tiles that have changed during the last traverse. */
        void RegisterChangedTileNode(TileNode* tilenode, Side side);

        /** Build a list of recently changed tiles that will require modification to stitch to a different LOD neighbour. */
        void BuildTileUpdateVec(unsigned int framenumber);

        void MarkBoundingTiles(TileNode* tilenode, Side side, unsigned int tilesPerLod0Tile, unsigned int numTilesX0, unsigned int numTilesY0, unsigned int framenumber);

        void QueueTileForUpdate(TileNode* tilenode, Side side, TileNode* target);

    public: // TerrainEngineNode

        // for standalone tile creation outside of a terrain
        osg::Node* createTile(const TileKey& key);

        // when incremental update is enabled, forces regeneration of tiles
        // in the given region.
        void invalidateRegion(
            const GeoExtent& extent,
            unsigned         minLevel,
            unsigned         maxLevel);

    public: // internal TerrainEngineNode

        virtual void preInitialize( const Map* map, const TerrainOptions& options );
        virtual void postInitialize( const Map* map, const TerrainOptions& options );
        virtual const TerrainOptions& getTerrainOptions() const { return _terrainOptions; }
        virtual osg::BoundingSphere computeBound() const;

    public: // osg::Node

        void traverse(osg::NodeVisitor& nv);

    public: // MapCallback adapter functions

        void onMapInfoEstablished( const MapInfo& mapInfo ); // not virtual!
        void onMapModelChanged( const MapModelChange& change ); // not virtual!

        UID getUID() const;

    public: // statics
        static void registerEngine( MPTerrainEngineNode* engineNode );
        static void unregisterEngine( UID uid );
        static void getEngineByUID( UID uid, osg::ref_ptr<MPTerrainEngineNode>& output );

    public:
        class ElevationChangedCallback : public ElevationLayerCallback
        {
        public:
            ElevationChangedCallback( MPTerrainEngineNode* terrain );

           virtual void onVisibleChanged( TerrainLayer* layer );

            MPTerrainEngineNode* _terrain;
            friend class MPTerrainEngineNode;
        };

    protected:
        // override from TerrainEngineNode
        virtual void updateTextureCombining() { updateState(); }

    private:
        void init();
        void syncMapModel();

        // Reloads all the tiles in the terrain due to a data model change
        void refresh(bool force =false);
        void createTerrain();

        void addImageLayer( ImageLayer* layer );
        void addElevationLayer( ElevationLayer* layer );

        void removeImageLayer( ImageLayer* layerRemoved );
        void removeElevationLayer( ElevationLayer* layerRemoved );
        void toggleElevationLayer( ElevationLayer* layer );

        void moveImageLayer( unsigned int oldIndex, unsigned int newIndex );
        void moveElevationLayer( unsigned int oldIndex, unsigned int newIndex );

        void updateState();

    private:
        MPTerrainEngineOptions _terrainOptions;

        class TerrainNode* _terrain;
        UID                _uid;
        Revision           _mapModelRev;  // tracks revision changes int the map model
        Revision           _terrainRev;   // the revisinon of the rendered terrain (slightly different)
        Revision           _shaderLibRev;
        bool               _batchUpdateInProgress;
        bool               _refreshRequired;
        bool               _stateUpdateRequired;
        bool               _rootTilesRegistered;
        Threading::Mutex   _rootTilesRegisteredMutex;

        osg::ref_ptr< ElevationChangedCallback > _elevationCallback;

        MapFrame* _update_mapf; // map frame for the main/update traversal thread

        // node registry is shared across all threads.
        osg::ref_ptr<TileNodeRegistry> _liveTiles;      // tiles in the scene graph.
        osg::ref_ptr<TileNodeRegistry> _deadTiles;        // tiles that used to be in the scene graph.

        Threading::PerThread< osg::ref_ptr<KeyNodeFactory> > _perThreadKeyNodeFactories;
        KeyNodeFactory* getKeyNodeFactory();

        osg::Timer _timer;
        unsigned   _tileCount;
        double     _tileCreationTime;
        int        _primaryUnit;
        int        _secondaryUnit;

        osg::Uniform* _verticalScaleUniform;

        osg::ref_ptr< TileModelFactory > _tileModelFactory;

        std::vector< ChangedTile > _changedTiles;

        TileNodeVector _tilesToUpdate;

        MPTerrainEngineNode( const MPTerrainEngineNode& rhs, const osg::CopyOp& op =osg::CopyOp::DEEP_COPY_ALL ) { }
    };

} } } // namespace osgEarth::Drivers::MPTerrainEngine

#endif // OSGEARTH_DRIVERS_MP_TERRAIN_ENGINE_ENGINE_NODE_H
