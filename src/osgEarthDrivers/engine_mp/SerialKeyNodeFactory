/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2013 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ENGINE_MP_SERIAL_KEY_NODE_FACTORY
#define OSGEARTH_ENGINE_MP_SERIAL_KEY_NODE_FACTORY 1

#include "Common"
#include "KeyNodeFactory"
#include "TerrainNode"
#include "TileModelFactory"
#include "TileNodeRegistry"
#include <osgEarth/MapInfo>
#include <osgEarth/Progress>

using namespace osgEarth;
using namespace osgEarth::Drivers;

namespace osgEarth_engine_mp
{
    class SerialKeyNodeFactory : public KeyNodeFactory
    {
    public:
        SerialKeyNodeFactory(
            const Map*                          map,
            TileModelFactory*                   modelFactory,
            TileModelCompiler*                  modelCompiler,
            TileNodeRegistry*                   liveTiles,
            TileNodeRegistry*                   deadTiles,
            const MPTerrainEngineOptions&       options,
            TerrainNode*                        terrain,
            UID                                 engineUID );

        /** dtor */
        virtual ~SerialKeyNodeFactory() { }


    public: // KeyNodeFactory

        osg::Node* createRootNode( const TileKey& key );

        /**
         * Creates a TileNode or TileGroup corresponding to the TileKey.
         *
         * @param key           TileKey for which to create a new node
         * @param setupChildren When true, build and include the necessary structures to
         *                      page in subtiles if and when necessary. If false, you just get
         *                      the tile alone with no paging support.
         * @param progress      Callback for cancelation and progress reporting
         */
        osg::Node* createNode( const TileKey& key, bool setupChildren, ProgressCallback* progress );

        TileModelCompiler* getCompiler() const { return _modelCompiler.get(); }

    protected:
        osg::Node* createTile(TileModel* model, bool setupChildren);

        MapFrame                            _frame;
        osg::ref_ptr<TileModelFactory>      _modelFactory;
        osg::ref_ptr<TileModelCompiler>     _modelCompiler;
        osg::ref_ptr<TileNodeRegistry>      _liveTiles;
        osg::ref_ptr<TileNodeRegistry>      _deadTiles;
        const MPTerrainEngineOptions&       _options;
        osg::ref_ptr< TerrainNode >         _terrain;
        UID                                 _engineUID;

        osg::ref_ptr<MPTerrainEngineNode>   _terrainEngineNode;
    };

} // namespace osgEarth_engine_mp

#endif // OSGEARTH_ENGINE_MP_SERIAL_KEY_NODE_FACTORY
